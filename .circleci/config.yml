version: 2.1

orbs:
  win: circleci/windows@2.4.1
  aws-cli: circleci/aws-cli@2.0.3
  gh: circleci/github-cli@1.0.4

parameters:
  node_version:
    type: string
    default: '14.17.5'
  aws_version:
    type: string
    default: '2.4.12'
  gh_version:
    type: string
    default: '1.9.2'

executors:
  linux:
    parameters:
      node_version:
        type: string
        default: << pipeline.parameters.node_version >>
    docker:
      - image: cimg/node:<< parameters.node_version >>
    working_directory: /mnt/ramdisk/snyk
  alpine:
    docker:
      - image: node:<< pipeline.parameters.node_version >>-alpine

commands:
  setup_npm:
    parameters:
      node_version:
        type: string
        default: << pipeline.parameters.node_version >>
      npm_version:
        type: string
        default: '7.21.1'
      npm_cache_directory:
        type: string
        default: /mnt/ramdisk/.npm
      npm_global_sudo:
        type: boolean
        default: true
      npm_install:
        type: boolean
        default: false
    steps:
      - restore_cache:
          name: Restoring npm cache
          keys:
            - npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
      - when:
          condition:
            not: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: npm install -g npm@<< parameters.npm_version >>
      - when:
          condition: << parameters.npm_global_sudo >>
          steps:
            run:
              name: Installing npm
              command: sudo npm install -g npm@<< parameters.npm_version >>
      - run:
          name: Configuring npm
          command: |
            npm config set '//registry.npmjs.org/:_authToken' '${NPM_TOKEN}'
            npm config set cache << parameters.npm_cache_directory >>
            npm config set prefer-offline true
      - when:
          condition: << parameters.npm_install >>
          steps:
            - run:
                name: Installing project dependencies
                command: npm ci
            - save_cache:
                name: Saving npm cache
                key: npm-cache-v2-{{ arch }}-node<< parameters.node_version >>-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
                paths:
                  - << parameters.npm_cache_directory >>
  install_sdks_windows:
    steps:
      - run:
          name: Removing pre-installed NodeJS
          command: |
            $current_node_version = node --version
            nvm uninstall $current_node_version
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Installing SDKs
          command: choco install .circleci/chocolatey.config --no-progress
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey
  install_sdks_linux:
    steps:
      - run:
          name: Installing Python
          command: sudo apt install python3 python3-pip python-is-python3
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - install_sdkman
  install_sdks_alpine:
    steps:
      - run:
          name: Installing Python
          command: |
            apk update
            apk add python3 py3-pip
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - install_sdkman
  install_sdkman:
    steps:
      - run:
          name: Installing SDKMAN
          # The install script comes from https://get.sdkman.io/?rcupdate=false
          # We need to disable rcupdate as CircleCI uses a different setup.
          command: |
            ./.circleci/vendor/sdkman-install.sh
            echo -e '\nsource "/home/circleci/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
            source $BASH_ENV
      - save_cache:
          name: Saving SDKMAN install cache
          key: sdkman-install-cache-v3-{{ arch }}-{{ checksum ".circleci/vendor/sdkman-install.sh" }}
          paths:
            - ~/.sdkman
      - restore_cache:
          name: Restoring SDKMAN archive cache
          keys:
            - sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
      - run:
          name: Installing SDKs
          command: ./.circleci/install-sdks-linux.sh
      - save_cache:
          name: Saving SDKMAN archive cache
          key: sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
          paths:
            - ~/.sdkman/archives
  install_shellspec_dependencies:
    steps:
      - run:
          name: Installing ShellSpec
          command: |
            curl -fsSL https://git.io/shellspec | sh -s -- -y
            sudo ln -s ${HOME}/.local/lib/shellspec/shellspec /usr/local/bin/shellspec
  pack_snyk_cli:
    steps:
      - run:
          name: Packing Snyk CLI
          command: |
            mkdir ./dist-pack
            cd ./dist-pack
            npm pack ..
  install_release_dependencies:
    steps:
      - run:
          name: Installing release dependencies
          command: |
            sudo apt update
            sudo apt install osslsigncode
jobs:
  install:
    executor: linux
    steps:
      - checkout
      - setup_npm:
          npm_install: true
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - packages/*/node_modules
  lint:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Linting project
          command: make -k lint
  build:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Building project
          command: make build-prod
      - persist_to_workspace:
          root: .
          paths:
            - dist/
            - packages/*/dist
            - pysrc
  regression-test:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - install_shellspec_dependencies
      - setup_npm
      - run:
          name: Installing test fixture dependencies
          working_directory: ./test/fixtures/basic-npm
          command: npm install
      - run:
          name: Installing Snyk CLI
          command: make install NPM='sudo npm'
      - run:
          name: Running ShellSpec tests
          working_directory: ./test/smoke
          command: |
            echo "Checkout the README in test/smoke folder for more details about this step"
            unset SNYK_API
            unset SNYK_API_KEY
            shellspec -f d -e REGRESSION_TEST=1

  test-windows:
    executor: win/default
    working_directory: C:\Users\circleci\snyk
    parameters:
      test_snyk_command:
        type: string
        default: C:\Users\circleci\snyk\binary-releases\snyk-win.exe
    steps:
      - run:
          name: Configuring Git
          command: git config --global core.autocrlf false
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_windows
      - run:
          name: Configuring artifact
          command: << parameters.test_snyk_command >> config set "api=$env:SNYK_API_KEY"
      - run:
          name: Testing artifact
          command: make test-acceptance
          environment:
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>

  test-linux:
    executor: linux
    environment:
      TEMP: /mnt/ramdisk/tmp
    parameters:
      test_snyk_command:
        type: string
        default: /mnt/ramdisk/snyk/binary-releases/snyk-linux
    steps:
      - run:
          name: Creating temporary directory
          command: mkdir /mnt/ramdisk/tmp
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - run:
          name: Configuring artifact
          command: << parameters.test_snyk_command >> config set "api=${SNYK_API_KEY}"
      - run:
          name: Testing artifact
          command: make test-acceptance
          environment:
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>

  test-alpine:
    executor: alpine
    working_directory: /home/node/snyk
    parameters:
      test_snyk_command:
        type: string
        default: /home/node/snyk/binary-releases/snyk-alpine
    steps:
      - checkout
      # - attach_workspace:
      #     at: .
      - install_sdks_alpine
      - aws-cli/install:
          version: 2.2.32
      # - run:
      #     name: Configuring artifact
      #     command: << parameters.test_snyk_command >> config set "api=${SNYK_API_KEY}"
      # - run:
      #     name: Testing artifact
      #     command: make test-acceptance
      #     environment:
      #       TEST_SNYK_COMMAND: << parameters.test_snyk_command >>

  test-node:
    parameters:
      node_version:
        type: string
      test_snyk_command:
        type: string
        default: snyk
    executor:
      name: linux
      node_version: << parameters.node_version >>
    environment:
      TEMP: /mnt/ramdisk/tmp
    steps:
      - run:
          name: Creating temporary directory
          command: mkdir /mnt/ramdisk/tmp
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - run:
          name: Installing Snyk CLI
          command: make install NPM='sudo npm'
      - run:
          name: Configuring Snyk CLI
          command: << parameters.test_snyk_command >> config set "api=${SNYK_API_KEY}"
      - run:
          name: Running acceptance tests
          command: make test-acceptance
          environment:
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>

  test-unit:
    executor: linux
    environment:
      TEMP: /mnt/ramdisk/tmp
    steps:
      - run:
          name: Creating temporary directory
          command: mkdir /mnt/ramdisk/tmp
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running unit tests
          command: make test-unit

  test-acceptance:
    executor: linux
    environment:
      TEMP: /mnt/ramdisk/tmp
    steps:
      - run:
          name: Creating temporary directory
          command: mkdir /mnt/ramdisk/tmp
      - checkout
      - attach_workspace:
          at: .
      - setup_npm
      - install_sdks_linux
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running acceptance tests
          command: make test-acceptance

  test-tap:
    executor: linux
    parallelism: 2
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_sdks_linux
      - setup_npm
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running Tap tests
          command: |
            npx tap -Rspec --timeout=300 --node-arg=-r --node-arg=ts-node/register \
              $(circleci tests glob "test/tap/*.test.*" | circleci tests split)

  build-artifact:
    executor: linux
    parameters:
      artifact:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - install_release_dependencies
      - setup_npm
      - run:
          name: Updating package versions
          command: ./release-scripts/update-dev-versions.sh
      - run:
          name: Pruning Snyk CLI dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - run:
          name: Building artifact
          command: make binary-releases/<< parameters.artifact >>
      - store_artifacts:
          path: binary-releases
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases

  prod-release:
    executor: linux
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Should I release?
          command: ./release-scripts/should-i-release.sh
      - gh/setup:
          token: GH_TOKEN
          version: << pipeline.parameters.gh_version >>
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - install_release_dependencies
      - setup_npm
      - run:
          name: Updating package versions
          command: |
            ./release-scripts/update-versions.sh
            git update-index --skip-worktree -- ./lerna.json
            git update-index --skip-worktree -- ./package.json
            git update-index --skip-worktree -- ./packages/snyk-protect/package.json
      - run:
          name: Pruning Snyk CLI dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - run:
          name: Bumping versions and publishing packages
          command: npx lerna publish minor --yes --no-push --no-git-tag-version --exact
      - run:
          name: Building binaries
          command: |
            ./release-scripts/make-binaries.sh
            ls -la ./binary-releases
      - store_artifacts:
          path: ./binary-releases
      - run:
          name: Validating binaries
          working_directory: ./binary-releases
          command: ../release-scripts/validate-checksums.sh
      - run:
          name: Generating release notes
          command: npx conventional-changelog-cli -p angular -l -r 1 > RELEASE_NOTES.txt
      - run:
          name: Publishing binaries
          command: ./release-scripts/upload-artifacts.sh
      - run:
          name: Handling failed release
          command: ./release-scripts/handle-failed-release.sh
          when: on_fail

workflows:
  version: 2
  test_and_release:
    jobs:
      # - install:
      #     name: Install
      # - lint:
      #     name: Lint
      #     requires:
      #       - Install
      # - build:
      #     name: Build
      #     requires:
      #       - Install
      # - build-artifact:
      #     name: Build (<< matrix.artifact >>)
      #     requires:
      #       - Build
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #     matrix:
      #       parameters:
      #         artifact:
      #           # - snyk-node.tgz
      #           # - snyk-linux
      #           # - snyk-win.exe
      #           # - snyk-macos
      #           - snyk-alpine
      #           # - snyk-for-docker-desktop-darwin-x64.tar.gz
      #           # - snyk-for-docker-desktop-darwin-arm64.tar.gz
      #           # - docker-mac-signed-bundle.tar.gz
      # - regression-test:
      #     name: Regression Tests (snyk-node.tgz)
      #     context: nodejs-install
      #     requires:
      #       - Build (snyk-node.tgz)
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-windows:
      #     name: Acceptance Tests (snyk-win.exe)
      #     context: nodejs-install
      #     requires:
      #       - Build (snyk-win.exe)
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-linux:
      #     name: Acceptance Tests (snyk-linux)
      #     context: nodejs-install
      #     requires:
      #       - Build (snyk-linux)
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      - test-alpine:
          name: Acceptance Tests (snyk-alpine)
          context: nodejs-install
          # requires:
          #   - Build (snyk-alpine)
          filters:
            branches:
              ignore:
                - master
      # - test-windows:
      #     name: Acceptance Tests (snyk-win.exe)
      #     context: nodejs-install
      #     requires:
      #       - Build (snyk-win.exe)
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-linux:
      #     name: Acceptance Tests (snyk-linux)
      #     context: nodejs-install
      #     requires:
      #       - Build (snyk-linux)
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-node:
      #     name: Acceptance Tests (Node v<< matrix.node_version >>)
      #     context: nodejs-install
      #     requires:
      #       - Build (snyk-node.tgz)
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      #     matrix:
      #       parameters:
      #         node_version:
      #           - '10.24.1'
      #           - '12.22.5'
      #           - '14.17.5'
      #           - '16.13.0'
      # - test-unit:
      #     name: Unit Tests
      #     context: nodejs-install
      #     requires:
      #       - Build
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-acceptance:
      #     name: Acceptance Tests
      #     context: nodejs-install
      #     requires:
      #       - Unit Tests
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - test-tap:
      #     name: Tap Tests
      #     context: nodejs-install
      #     requires:
      #       - Build
      #     filters:
      #       branches:
      #         ignore:
      #           - master
      # - prod-release:
      #     name: Production Release
      #     context: nodejs-app-release
      #     requires:
      #       - Lint
      #       - Build
      #     filters:
      #       branches:
      #         only:
      #           - master
