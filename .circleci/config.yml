version: 2.1

orbs:
  gh: circleci/github-cli@1.0.4

#
# Executor Definitions
# https://circleci.com/docs/2.0/executor-types
#
#   NodeJS Variants:
#     https://circleci.com/developer/images/image/cimg/node
#
#   Linux Variants:
#     https://circleci.com/developer/machine/image/ubuntu-2004
#
#   Windows Variants:
#     https://circleci.com/developer/orbs/orb/circleci/windows
#
#   macOS Variants:
#     https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
#
executors:
  linux-x64-node14: &linux-x64-node14
    docker:
      - image: cimg/node:14.17.5
  linux-x64-node12: &linux-x64-node12
    docker:
      - image: cimg/node:12.22.5
  linux-x64: &linux-x64
    machine:
      image: ubuntu-2004:202111-02
  linux-arm64: &linux-arm64
    machine:
      image: ubuntu-2004:202101-01
    resource_class: arm.medium
  darwin-x64: &darwin-x64
    macos:
      xcode: '13.2.1'
  win32-x64: &win32-x64
    machine:
      image: 'windows-server-2019-vs2019:stable'
    resource_class: windows.medium

#
# Command Definitions
# https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
#
commands:
  install_project_dependencies:
    parameters:
      npm_version:
        type: string
        default: '7.21.1'
      npm_cache_directory:
        type: string
        default: ~/.npm
    steps:
      - restore_cache:
          name: Restoring npm cache
          keys:
            - npm-cache-v2-{{ arch }}-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
      - run:
          name: Installing npm
          command: sudo npm install -g npm@<< parameters.npm_version >>
      - run:
          name: Configuring npm
          command: |
            npm config set '//registry.npmjs.org/:_authToken' '${NPM_TOKEN}'
            npm config set cache << parameters.npm_cache_directory >>
            npm config set prefer-offline true
      - run:
          name: Installing project dependencies
          command: npm ci
      - save_cache:
          name: Saving npm cache
          key: npm-cache-v2-{{ arch }}-npm<< parameters.npm_version >>-{{ checksum "package-lock.json" }}
          paths:
            - << parameters.npm_cache_directory >>
  install_sdks:
    parameters:
      executor:
        type: executor
        default: linux-x64-node14
    steps:
      - when:
          condition:
            or:
              - equal: [*linux-x64-node14, << parameters.executor >>]
              - equal: [*linux-x64-node12, << parameters.executor >>]
              - equal: [*linux-x64, << parameters.executor >>]
              - equal: [*linux-arm64, << parameters.executor >>]
          steps:
            - restore_cache:
                name: Restoring SDKMAN install cache
                keys:
                  - sdkman-install-cache-v3-{{ arch }}-{{ checksum ".circleci/vendor/sdkman-install.sh" }}
            - run:
                name: Installing Python, AWS CLI
                command: |
                  sudo apt update
                  sudo apt install python3 python3-pip python-is-python3 awscli
            - run:
                name: Installing SDKMAN
                # The install script comes from https://get.sdkman.io/?rcupdate=false
                # We need to disable rcupdate as CircleCI uses a different setup.
                command: |
                  ./.circleci/vendor/sdkman-install.sh
                  echo -e '\nsource "/home/circleci/.sdkman/bin/sdkman-init.sh"' >> $BASH_ENV
                  source $BASH_ENV
            - save_cache:
                name: Saving SDKMAN install cache
                key: sdkman-install-cache-v3-{{ arch }}-{{ checksum ".circleci/vendor/sdkman-install.sh" }}
                paths:
                  - ~/.sdkman
            - restore_cache:
                name: Restoring SDKMAN archive cache
                keys:
                  - sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
            - run:
                name: Installing SDKs
                command: ./.circleci/install-sdks-linux.sh
            - save_cache:
                name: Saving SDKMAN archive cache
                key: sdkman-archive-cache-v3-{{ arch }}-{{ checksum ".circleci/install-sdks-linux.sh" }}
                paths:
                  - ~/.sdkman/archives
      - when:
          condition:
            or:
              - equal: [*win32-x64, << parameters.executor >>]
          steps:
            - restore_cache:
                name: Restoring Chocolatey cache
                keys:
                  - chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
            - run:
                name: Installing SDKs
                command: choco install .circleci/chocolatey.config --no-progress
            - save_cache:
                name: Saving Chocolatey cache
                key: chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
                paths:
                  - ~\AppData\Local\Temp\chocolatey
  pack_snyk_cli:
    steps:
      - run:
          name: Packing Snyk CLI
          command: |
            mkdir ./dist-pack
            cd ./dist-pack
            npm pack ..
  install_release_dependencies:
    steps:
      - run:
          name: Installing release dependencies
          command: |
            sudo apt update
            sudo apt install osslsigncode

#
# Job Definitions
# https://circleci.com/docs/2.0/configuration-reference/#jobs
#
jobs:
  lint:
    executor: linux-x64-node14
    steps:
      - checkout
      - install_project_dependencies
      - run:
          name: Linting project
          command: npm run lint

  build:
    executor: linux-x64-node14
    steps:
      - checkout
      - install_project_dependencies
      - run:
          name: Building project
          command: npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - dist/
            - packages/*/dist
            - pysrc

  regression-test:
    executor: linux-x64-node14
    steps:
      - checkout
      - install_sdks
      - install_project_dependencies
      - attach_workspace:
          at: .
      - run:
          name: Installing test fixture dependencies
          working_directory: ./test/fixtures/basic-npm
          command: npm install
      - run:
          name: Pruning dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - pack_snyk_cli
      - run:
          name: Installing packed Snyk CLI
          command: sudo npm install -g snyk-*.tgz
          path: ./dist-pack
      - run:
          name: Installing ShellSpec
          command: |
            curl -fsSL https://git.io/shellspec | sh -s -- -y
            sudo ln -s ${HOME}/.local/lib/shellspec/shellspec /usr/local/bin/shellspec
      - run:
          name: Running ShellSpec tests
          working_directory: ./test/smoke
          command: |
            echo "Checkout the README in test/smoke folder for more details about this step"
            unset SNYK_API
            unset SNYK_API_KEY
            shellspec -f d -e REGRESSION_TEST=1

  unit-test:
    executor: linux-x64-node14
    steps:
      - checkout
      - install_sdks
      - install_project_dependencies
      - attach_workspace:
          at: .
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running unit tests (Packages)
          command: npm run test:packages-unit -- --ci
      - run:
          name: Running unit tests (Jest)
          command: npm run test:jest-unit -- --ci
      - run:
          name: Running system tests (Jest)
          command: npm run test:jest-system -- --ci
      - run:
          name: Running root tests (Jest)
          command: npm run test:jest -- --ci

  acceptance-test:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - install_sdks:
          executor: << parameters.executor >>
      # TODO: conditionally install npm package or binary
      # TODO: download relevant test binary and run tests
      # - run:
      #     name: Running acceptance tests (Packages)
      #     command: npm run test:packages-acceptance -- --ci
      # - run:
      #     name: Running acceptance tests (Jest)
      #     command: npm run test:jest-acceptance -- --ci

  tap-test:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - checkout
      - install_sdks:
          executor: << parameters.executor >>
      - install_project_dependencies
      - attach_workspace:
          at: .
      - run:
          name: Configuring Snyk CLI
          command: node ./bin/snyk config set "api=${SNYK_API_KEY}"
      - run:
          name: Running root tests (Tap)
          command: npm run test:test
      - run:
          name: Running system tests (Tap)
          command: npm run test:system
      - run:
          name: Running acceptance tests (Tap)
          command: npm run test:acceptance

  dev-release:
    executor: linux-x64-node14
    steps:
      - checkout
      - install_release_dependencies
      - install_project_dependencies
      - attach_workspace:
          at: .
      - run:
          name: Updating package versions
          command: ./release-scripts/update-dev-versions.sh
      - run:
          name: Pruning Snyk CLI dependencies
          command: npx ts-node ./release-scripts/prune-dependencies-in-packagejson.ts
      - run:
          name: Building binaries
          command: |
            cat package.json
            ./release-scripts/make-binaries.sh
            ls -la ./binary-releases
      - store_artifacts:
          path: ./binary-releases
      - run:
          name: Validating binaries
          working_directory: ./binary-releases
          command: ../release-scripts/validate-checksums.sh
      - pack_snyk_cli
      - store_artifacts:
          path: ./dist-pack

#
# Workflow Definitions
# https://circleci.com/docs/2.0/configuration-reference/#workflows
#
workflows:
  version: 2
  test_and_release:
    jobs:
      - lint:
          name: Lint
      - build:
          name: Build

      - unit-test:
          name: Unit Test
          context: nodejs-install
          filters:
            branches:
              ignore:
                - master
          requires:
            - Build # needed for importing local packages like @snyk/fix

      - acceptance-test:
          name: Acceptance Test (<< matrix.executor >>)
          context: nodejs-install
          filters:
            branches:
              ignore:
                - master
          requires:
            - Build
          matrix:
            parameters:
              executor: [linux-x64-node14, linux-x64-node12, win32-x64]

      - tap-test:
          name: Tap Test (<< matrix.executor >>)
          context: nodejs-install
          filters:
            branches:
              ignore:
                - master
          requires:
            - Build
          matrix:
            parameters:
              executor: [linux-x64-node14, linux-x64-node12]

      - regression-test:
          name: Regression Tests
          context: nodejs-install
          filters:
            branches:
              ignore:
                - master
          requires:
            - Build

      - dev-release:
          name: Development Release
          filters:
            branches:
              ignore:
                - master
          requires:
            - Lint
            - Build
